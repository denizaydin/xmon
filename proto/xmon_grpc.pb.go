// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnaryEchoServiceClient is the client API for UnaryEchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnaryEchoServiceClient interface {
	UnaryEcho(ctx context.Context, in *XmonEchoRequest, opts ...grpc.CallOption) (*XmonEchoResponse, error)
}

type unaryEchoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnaryEchoServiceClient(cc grpc.ClientConnInterface) UnaryEchoServiceClient {
	return &unaryEchoServiceClient{cc}
}

func (c *unaryEchoServiceClient) UnaryEcho(ctx context.Context, in *XmonEchoRequest, opts ...grpc.CallOption) (*XmonEchoResponse, error) {
	out := new(XmonEchoResponse)
	err := c.cc.Invoke(ctx, "/proto.UnaryEchoService/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnaryEchoServiceServer is the server API for UnaryEchoService service.
// All implementations should embed UnimplementedUnaryEchoServiceServer
// for forward compatibility
type UnaryEchoServiceServer interface {
	UnaryEcho(context.Context, *XmonEchoRequest) (*XmonEchoResponse, error)
}

// UnimplementedUnaryEchoServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUnaryEchoServiceServer struct {
}

func (UnimplementedUnaryEchoServiceServer) UnaryEcho(context.Context, *XmonEchoRequest) (*XmonEchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}

// UnsafeUnaryEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnaryEchoServiceServer will
// result in compilation errors.
type UnsafeUnaryEchoServiceServer interface {
	mustEmbedUnimplementedUnaryEchoServiceServer()
}

func RegisterUnaryEchoServiceServer(s grpc.ServiceRegistrar, srv UnaryEchoServiceServer) {
	s.RegisterService(&UnaryEchoService_ServiceDesc, srv)
}

func _UnaryEchoService_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XmonEchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnaryEchoServiceServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UnaryEchoService/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnaryEchoServiceServer).UnaryEcho(ctx, req.(*XmonEchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnaryEchoService_ServiceDesc is the grpc.ServiceDesc for UnaryEchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnaryEchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UnaryEchoService",
	HandlerType: (*UnaryEchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _UnaryEchoService_UnaryEcho_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/xmon.proto",
}

// ConfigServerClient is the client API for ConfigServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServerClient interface {
	CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ConfigServer_CreateStreamClient, error)
}

type configServerClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServerClient(cc grpc.ClientConnInterface) ConfigServerClient {
	return &configServerClient{cc}
}

func (c *configServerClient) CreateStream(ctx context.Context, in *Connect, opts ...grpc.CallOption) (ConfigServer_CreateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConfigServer_ServiceDesc.Streams[0], "/proto.ConfigServer/CreateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &configServerCreateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConfigServer_CreateStreamClient interface {
	Recv() (*MonitoringObject, error)
	grpc.ClientStream
}

type configServerCreateStreamClient struct {
	grpc.ClientStream
}

func (x *configServerCreateStreamClient) Recv() (*MonitoringObject, error) {
	m := new(MonitoringObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConfigServerServer is the server API for ConfigServer service.
// All implementations should embed UnimplementedConfigServerServer
// for forward compatibility
type ConfigServerServer interface {
	CreateStream(*Connect, ConfigServer_CreateStreamServer) error
}

// UnimplementedConfigServerServer should be embedded to have forward compatible implementations.
type UnimplementedConfigServerServer struct {
}

func (UnimplementedConfigServerServer) CreateStream(*Connect, ConfigServer_CreateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}

// UnsafeConfigServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServerServer will
// result in compilation errors.
type UnsafeConfigServerServer interface {
	mustEmbedUnimplementedConfigServerServer()
}

func RegisterConfigServerServer(s grpc.ServiceRegistrar, srv ConfigServerServer) {
	s.RegisterService(&ConfigServer_ServiceDesc, srv)
}

func _ConfigServer_CreateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Connect)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigServerServer).CreateStream(m, &configServerCreateStreamServer{stream})
}

type ConfigServer_CreateStreamServer interface {
	Send(*MonitoringObject) error
	grpc.ServerStream
}

type configServerCreateStreamServer struct {
	grpc.ServerStream
}

func (x *configServerCreateStreamServer) Send(m *MonitoringObject) error {
	return x.ServerStream.SendMsg(m)
}

// ConfigServer_ServiceDesc is the grpc.ServiceDesc for ConfigServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfigServer",
	HandlerType: (*ConfigServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateStream",
			Handler:       _ConfigServer_CreateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/xmon.proto",
}

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	RecordStats(ctx context.Context, opts ...grpc.CallOption) (Stats_RecordStatsClient, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) RecordStats(ctx context.Context, opts ...grpc.CallOption) (Stats_RecordStatsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[0], "/proto.Stats/RecordStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsRecordStatsClient{stream}
	return x, nil
}

type Stats_RecordStatsClient interface {
	Send(*StatsObject) error
	CloseAndRecv() (*Close, error)
	grpc.ClientStream
}

type statsRecordStatsClient struct {
	grpc.ClientStream
}

func (x *statsRecordStatsClient) Send(m *StatsObject) error {
	return x.ClientStream.SendMsg(m)
}

func (x *statsRecordStatsClient) CloseAndRecv() (*Close, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Close)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StatsServer is the server API for Stats service.
// All implementations should embed UnimplementedStatsServer
// for forward compatibility
type StatsServer interface {
	RecordStats(Stats_RecordStatsServer) error
}

// UnimplementedStatsServer should be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (UnimplementedStatsServer) RecordStats(Stats_RecordStatsServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordStats not implemented")
}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_RecordStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StatsServer).RecordStats(&statsRecordStatsServer{stream})
}

type Stats_RecordStatsServer interface {
	SendAndClose(*Close) error
	Recv() (*StatsObject, error)
	grpc.ServerStream
}

type statsRecordStatsServer struct {
	grpc.ServerStream
}

func (x *statsRecordStatsServer) SendAndClose(m *Close) error {
	return x.ServerStream.SendMsg(m)
}

func (x *statsRecordStatsServer) Recv() (*StatsObject, error) {
	m := new(StatsObject)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Stats",
	HandlerType: (*StatsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordStats",
			Handler:       _Stats_RecordStats_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/xmon.proto",
}
